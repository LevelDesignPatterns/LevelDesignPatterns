{"code":"!function(e){var a={};function t(i){if(a[i])return a[i].exports;var n=a[i]={i:i,l:!1,exports:{}};return e[i].call(n.exports,n,n.exports,t),n.l=!0,n.exports}t.m=e,t.c=a,t.d=function(e,a,i){t.o(e,a)||Object.defineProperty(e,a,{enumerable:!0,get:i})},t.r=function(e){\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(e,\"__esModule\",{value:!0})},t.t=function(e,a){if(1&a&&(e=t(e)),8&a)return e;if(4&a&&\"object\"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(t.r(i),Object.defineProperty(i,\"default\",{enumerable:!0,value:e}),2&a&&\"string\"!=typeof e)for(var n in e)t.d(i,n,function(a){return e[a]}.bind(null,n));return i},t.n=function(e){var a=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(a,\"a\",a),a},t.o=function(e,a){return Object.prototype.hasOwnProperty.call(e,a)},t.p=\"\",t(t.s=0)}([function(e,a,t){const i=t(1),n=t(2);function s(e){e.sort((function(e,a){return e.language.name.toUpperCase()>=a.language.name.toUpperCase()}));var a='<div class = \"index\">';e.forEach((function(e,t){a+=\"<a href = #\"+e.language.name+\"> \"+e.language.name+\"</a> | \"})),a+=\"</div>\",document.body.innerHTML+=a;var t='<div class = \"db\">';return e.forEach((function(e,a){for(var i in t+='<div class = \"doc\" id = '+e.language.name+\">\",e.language)\"\"!=e.language[i]&e.language[i]!=[]&&(t+='<div class = \"fieldname\">'+i.toUpperCase()+'</div><div class = \"fielddata\">'+e.language[i]+\"</div>\");t+=\"</div>\"})),t+=\"</div>\"}document.body.innerHTML+=s(i),document.body.innerHTML+=s(n)},function(e){e.exports=JSON.parse('[{\"language\":{\"name\":\"PureScript\",\"url\":\"http://www.purescript.org/\",\"summary\":\"A strongly-typed functional programming language that compiles to JavaScript\",\"notes\":\"Compile to readable JavaScript and reuse existing JavaScript code easily. An extensive collection of libraries for development of web applications, web servers, apps and more. Excellent tooling and editor support with instant rebuilds. An active community with many learning resources. Build real-world applications using functional techniques and expressive types, such as: Algebraic data types and pattern matching, Row polymorphism and extensible records, Higher kinded types, Type classes with functional dependencies, and Higher-rank polymorphism.\",\"scope\":\"academic\",\"tags\":[\"functional\",\"pure\",\"transpiled\"],\"seealso\":[\"Javascript\",\"haskell\"],\"reddit\":\"https://www.reddit.com/r/purescript/\",\"wikipedia\":\"\",\"github\":\"\",\"influencedby\":[\"haskell\"],\"influencing\":[]}},{\"language\":{\"name\":\"Pike\",\"url\":\"https://pike.lysator.liu.se/\",\"summary\":\"Pike is a dynamic programming language with a syntax similar to Java and C.\",\"notes\":\"Pike is an interpreted, object-oriented programming language. It looks a bit like C and C++, but it is much easier to learn and use. It can be used for small scripts as well as for large programs. Pike is high-level and powerful, which means that even very complex things are easy to do in Pike, object-oriented, which means that you can use modern programming techniques to divide a large program into small pieces, which are much easier to write than it would be to write the entire program at once, interpreted, which means that you don’t have to wait for a program to compile and link when you want to run it, one of the fastest “scripting” languages available, garbage-collected, which makes programming much simpler, and also removes the risk for memory leaks and other memory-related bugs, easy to extend, which means that you can create plug-ins, written in Pike as well as in C or C++, and integrate them with the rest of Pike.\",\"scope\":\"academic\",\"tags\":[\"interpreted\",\"object-oriented\",\"garbage-collected\",\"extendable\"],\"seealso\":[\"c\",\"c++\"],\"reddit\":\"\",\"wikipedia\":\"\",\"github\":\"https://github.com/aardappel/lobster\",\"influencedby\":[],\"influencing\":[]}},{\"language\":{\"name\":\"Lobster\",\"url\":\"http://strlen.com/lobster/\",\"summary\":\"Lobster is a game programming language\",\"notes\":\"Unlike other game making systems that focus on an engine/editor that happens to be able to call out to a scripting language, Lobster is a general purpose stand-alone programming language that comes with a built-in library suitable for making games and other graphical things. It is therefore not very suitable for non-programmers.\",\"scope\":\"indie\",\"tags\":[\"games\"],\"seealso\":[],\"reddit\":\"\",\"wikipedia\":\"\",\"github\":\"https://github.com/aardappel/lobster\",\"influencedby\":[],\"influencing\":[]}},{\"language\":{\"name\":\"Red\",\"url\":\"https://www.red-lang.org/\",\"summary\":\"Red is a next-gen programming language, strongly inspired by REBOL.\",\"notes\":\"Red’s ambitious goal is to build the world’s first full-stack language, a language you can use from system programming tasks, up to high-level scripting through DSL. You\\'ve probably heard of the term \\\\\"Full-Stack Developer\\\\\". But what is a full-stack Language, exactly? Other languages talk about having \\\\\"one tool to rule them all\\\\\". Red has that mindset too, pushed to the limit - it\\'s a single executable that takes in your source files on any platform, and produces a packaged binary for any platform, from any other. The tool doesn’t depend on anything besides what came with your OS...shipping as a single executable that’s smaller than a megabyte. But that technical feat alone isn\\'t enough to define Red\\'s notion of a \\\\\"Full-Stack Language\\\\\". It\\'s about the ability to bend and redefine the system to meet any need, while still working with literate code, and getting top-flight performance.  So what\\'s being put in your hands is more like a \\\\\"language construction set\\\\\" than simply \\\\\"a language\\\\\". Whether you’re writing a device driver, a platform-native GUI application, or a shared library... Red lets you use a common syntax to code at the right level of abstraction for the task.\",\"scope\":\"indie\",\"tags\":[\"full stack\"],\"seealso\":[],\"reddit\":\"https://www.reddit.com/r/redlang/\",\"wikipedia\":\"\",\"github\":\"\",\"twitter\":\"https://twitter.com/red_lang\",\"influencedby\":[\"REBOL\"],\"influencing\":[]}},{\"language\":{\"name\":\"c-mera\",\"url\":\"https://min-lang.org/\",\"summary\":\"C-Mera is a very simple source-to-source compiler that utilizes Lisp\\'s macro system for meta programming of C-like languages.\",\"notes\":\"The C-Mera system is a set of very simple compilers that transform a notation based on S-Expressions (sexp) for C-like languages to the native syntax of that language, e.g. from sexp-C to C, and from sexp-CUDA to CUDA. The semantics of the sexp-based notation is identical to that of the native language, i.e. no inherent abstraction or layering is introduced.\",\"scope\":\"indie\",\"tags\":[\"domain specific\",\"extension\",\"embedded\"],\"seealso\":[\"c\",\"lisp\"],\"reddit\":\"\",\"wikipedia\":\"\",\"github\":\"https://github.com/kiselgra/c-mera\",\"twitter\":\"\",\"influencedby\":[],\"influencing\":[]}},{\"language\":{\"name\":\"Min\",\"url\":\"https://min-lang.org/\",\"summary\":\"min is a functional, concatenative programming language with a minimalist syntax, a small but practical standard library, and an advanced REPL. All packed in about 1MB*.\",\"notes\":\"Entirely written in Nim. It can be easily embedded in other nim programs. Follows the functional and concatenative programming paradigms. Provides a wide range of combinators for advanced stack manipulation and dequoting. Provides a minimal set of data types: integer, floats, strings, booleans, and quotations (lists). Fully homoiconic, all code can be accessed as data via quotations. Includes an advanced REPL with auto-completion and history management. Provides a lightweight module system. Provides sigils as syntactic sugar to access environment variables, quoting, defining and binding data, etc. Includes a small, useful standard library for common tasks. Self-contained, statically compiled into single file.\",\"scope\":\"indie\",\"tags\":[\"domain specific\",\"extension\",\"embedded\"],\"seealso\":[\"nim\",\"lisp\"],\"reddit\":\"\",\"wikipedia\":\"\",\"github\":\"\",\"twitter\":\"\",\"influencedby\":[],\"influencing\":[]}},{\"language\":{\"name\":\"Jai\",\"summary\":\"\",\"notes\":\"\",\"scope\":[\"indie\"],\"tags\":\"games\",\"seealso\":\"\",\"reddit\":\"\",\"wikipedia\":\"\",\"github\":\"\",\"influencedby\":[],\"influencing\":[]}},{\"language\":{\"name\":\"Self\",\"url\":\"http://www.selflanguage.org/\",\"summary\":\"Self is a prototype-based dynamic object-oriented programming language, environment, and virtual machine centered around the principles of simplicity, uniformity, concreteness, and liveness.\",\"notes\":\" Self includes a programming language, a collection of objects defined in the Self language, and a programming environment built in Self for writing Self programs. The language and environment attempt to present objects to the programmer and user in as direct and physical a way as possible. The system uses the prototype-based style of object construction.\",\"scope\":[\"academic\"],\"targets\":[\"OSX\",\"Linux x86\"],\"opensource\":\"yes\",\"tags\":\"\",\"seealso\":\"\",\"reddit\":\"\",\"wikipedia\":\"\",\"github\":\"\",\"influencedby\":[],\"influencing\":[]}},{\"language\":{\"name\":\"Luna\",\"url\":\"https://www.luna-lang.org/\",\"summary\":\"\",\"notes\":\"\",\"scope\":[\"indie\"],\"tags\":\"visual\",\"seealso\":\"\",\"reddit\":\"\",\"wikipedia\":\"\",\"github\":\"\",\"influencedby\":[],\"influencing\":[]}},{\"language\":{\"name\":\"Futhark\",\"url\":\"https://futhark-lang.org/\",\"summary\":\"High-performance purely functional data-parallel array programming on the GPU\",\"notes\":\"Futhark is a small programming language designed to be compiled to efficient parallel code. It is a statically typed, data-parallel, and purely functional array language in the ML family, and comes with a heavily optimising ahead-of-time compiler that presently generates GPU code via CUDA and OpenCL, although the language itself is hardware-agnostic and can also run on multicore CPUs.\",\"scope\":\"indie\",\"tags\":[\"pure\",\"functional\",\"static type\",\"data parallel\"],\"seealso\":[\"cuda\",\"opencl\"],\"reddit\":\"\",\"wikipedia\":\"\",\"github\":\"https://github.com/diku-dk/futhark\",\"influencedby\":[\"ML\"],\"influencing\":[]}},{\"language\":{\"name\":\"Odin\",\"url\":\"http://odin-lang.org/\",\"summary\":\"The Odin programming language is fast, concise, readable, pragmatic and open sourced. \",\"notes\":\"It is designed with the intent of creating an alterative to C with the following goals: simplicity, high performance,  built for modern systems & joy of programming.\",\"scope\":\"indie\",\"tags\":[],\"seealso\":[],\"reddit\":\"\",\"wikipedia\":\"\",\"github\":\"https://github.com/odin-lang/Odin\",\"patreon\":\"\",\"discord\":\"https://discord.gg/sVBPHEv\",\"influencedby\":[],\"influencing\":[]}},{\"language\":{\"name\":\"Zen\",\"url\":\"\",\"summary\":\"\",\"notes\":\"\",\"scope\":\"indie\",\"tags\":[],\"seealso\":[],\"reddit\":\"\",\"wikipedia\":\"\",\"github\":\"\",\"influencedby\":[],\"influencing\":[]}},{\"language\":{\"name\":\"Scheme\",\"url\":\"\",\"summary\":\"\",\"notes\":\"\",\"scope\":\"indie\",\"tags\":[],\"seealso\":[],\"reddit\":\"\",\"wikipedia\":\"\",\"github\":\"\",\"influencedby\":[],\"influencing\":[]}},{\"language\":{\"name\":\"Racket\",\"url\":\"\",\"summary\":\"\",\"notes\":\"\",\"scope\":\"indie\",\"tags\":[],\"seealso\":[],\"reddit\":\"\",\"wikipedia\":\"\",\"github\":\"\",\"influencedby\":[],\"influencing\":[]}},{\"language\":{\"name\":\"kei\",\"url\":\"https://github.com/caotic123/Kei\",\"summary\":\"Kei is a dependently language with a small and expressive core based on λΠ-calculus modulo rewriting.\",\"notes\":\"The core of Key is based on a type theory called Lambda-Pi-Calculus Modulo Calculus. Despite the core being very experimental, Kei can prove some properties through an encoding of a typed rule.\",\"scope\":\"indie\",\"tags\":[\"Lambda-Pi-Calculus\"],\"seealso\":[],\"reddit\":\"\",\"wikipedia\":\"\",\"github\":\"https://github.com/caotic123/Kei\",\"influencedby\":[],\"influencing\":[]}},{\"language\":{\"name\":\"Idris\",\"url\":\"https://www.idris-lang.org/\",\"summary\":\"\",\"notes\":\"\",\"scope\":\"indie\",\"tags\":[],\"seealso\":[],\"reddit\":\"\",\"wikipedia\":\"\",\"github\":\"\",\"influencedby\":[],\"influencing\":[]}},{\"language\":{\"name\":\"Z\",\"url\":\"https://chrisdone.com/posts/z/\",\"summary\":\"Lisp withouth the brackets?\",\"notes\":\"A tiny, strict, impure, curried, dynamically typed (although that may change), partially applied language with rather peculiar syntax.\",\"scope\":[\"indie\"],\"tags\":[],\"seealso\":[\"LISP\"],\"reddit\":\"\",\"wikipedia\":\"\",\"github\":\"\",\"influencedby\":[],\"influencing\":[]}},{\"language\":{\"name\":\"Elm\",\"url\":\"https://elm-lang.org/\",\"summary\":\"\",\"notes\":\"\",\"scope\":\"indie\",\"tags\":[],\"seealso\":[],\"reddit\":\"\",\"wikipedia\":\"\",\"github\":\"https://github.com/elm/elm-lang.org/\",\"influencedby\":[],\"influencing\":[]}},{\"language\":{\"name\":\"Zig\",\"url\":\"\",\"summary\":\"\",\"notes\":\"\",\"scope\":\"indie\",\"tags\":[],\"seealso\":[],\"reddit\":\"\",\"wikipedia\":\"\",\"github\":\"\",\"influencedby\":[],\"influencing\":[]}}]')},function(e){e.exports=JSON.parse('[{\"authors\":\"Gang of Four\",\"year\":\"1994\",\"title\":\"Design Patterns: Elements of Reusable Object-Oriented Software\",\"url\":\"https://en.wikipedia.org/wiki/Design_Patterns\"},{\"authors\":\"Bjork, S. & Holopainer, J.\",\"year\":\"2014\",\"title\":\"Patterns in Game Design\",\"url\":\"https://www.amazon.co.uk/Patterns-Design-Charles-River-Development/dp/1584503548\"},{\"authors\":\"Kenneth M. Hullett\",\"year\":\"2012\",\"title\":\"The Science Of Level Design: Design Patterns and Analysis of Player Behaviour in FPS Levels\",\"url\":\"https://users.soe.ucsc.edu/~ejw/dissertations/Ken-Hullett-dissertation.pdf\"},{\"authors\":\"Ahmed Khalifa, Fernando de Mesentier Silva, Julian Togelius\",\"year\":\"2019\",\"title\":\"Level Design Patterns in 2D Games\",\"url\":\"http://akhalifa.com/documents/level-design-patterns.pdf\"}]')}]);","extractedComments":[]}